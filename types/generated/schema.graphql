type Contribution {
  linesAdded: Int
  linesRemoved: Int
  mergedPrsCount: Int
  prsCount: Int
  repoId: String
  repository: Repository
  year: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LanguageEntity {
  id: String!
  size: Float!
}

type Organization {
  avatarUrl: String
  githubId: String!
  login: String!
  name: String
}

type ProfileForSitemap {
  avatarUrl: String
  login: String!
}

type Query {
  profilesForSitemap: [ProfileForSitemap!]!
  rankByLogin(login: String!): Rank
  rankings(limit: Int! = 100, offset: Int! = 0, order: RankOrder! = STARS_OWNED): [Rank!]!
  user(login: String!): User
}

type Rank {
  _id: String!
  contributedStars: Int!
  contributedStarsD: Int
  contributedStarsM: Int
  contributedStarsY: Int
  followersCount: Int!
  followersCountD: Int
  followersCountM: Int
  followersCountY: Int
  githubId: ID!
  ownedStars: Int!
  ownedStarsD: Int
  ownedStarsM: Int
  ownedStarsY: Int
  user: UserBasic
}

enum RankOrder {
  FOLLOWERS_COUNT
  STARS_CONTRIBUTED
  STARS_OWNED
}

type RankWithoutUser {
  _id: String!
  contributedStars: Int!
  contributedStarsD: Int
  contributedStarsM: Int
  contributedStarsY: Int
  followersCount: Int!
  followersCountD: Int
  followersCountM: Int
  followersCountY: Int
  githubId: ID!
  ownedStars: Int!
  ownedStarsD: Int
  ownedStarsM: Int
  ownedStarsY: Int
}

type Repository {
  createdAt: DateTime
  forkCount: Int!
  githubId: String!
  isArchived: Boolean!
  languages: RepositoryLanguagesEntity
  name: String
  pushedAt: DateTime
  releasesCount: Int
  stargazerCount: Int!
  url: String!
}

type RepositoryLanguagesEntity {
  nodes: [LanguageEntity!]!
  totalCount: Int!
  totalSize: Float!
}

enum RepositorySortField {
  STARGAZERS
}

type SocialAccount {
  nodes: [SocialAccountNodeEntity!]
  totalCount: Int!
}

type SocialAccountNodeEntity {
  displayName: String
  provider: String!
  url: String!
}

enum SortDirection {
  ASC
  DESC
}

type Timeline {
  changes: JSON!
  createdAt: DateTime!
}

type User {
  _id: String!
  avatarUrl: String
  company: String
  contributedRepoCount: Int
  contributedStars: Int
  contributions: [Contribution!]
  createdAt: DateTime!
  email: String
  fetchingStartedAt: Int
  fetchingStatus: UserFetchingStatus
  firstSeenAt: DateTime
  followersCount: Int
  followingCount: Int
  githubCreatedAt: DateTime
  githubFetchedAt: DateTime
  githubId: ID!
  githubServiceFetchedAt: DateTime
  githubUpdatedAt: DateTime
  isHireable: Boolean
  location: String
  login: String!
  name: String
  organizations: [Organization!]
  ownedStars: Int
  rank: RankWithoutUser
  repositories(limit: Int! = 10, offset: Int! = 0, order: RankOrder! = STARS_OWNED, sortBy: RepositorySortField! = STARGAZERS, sortDirection: SortDirection! = DESC): [Repository!]
  repositoriesCount: Int
  socialAccounts: SocialAccount
  timeline: [Timeline!]
  twitterUsername: String
  updatedAt: DateTime!
  websiteUrl: String
}

type UserBasic {
  avatarUrl: String
  contributedStars: Int
  followersCount: Int
  githubId: String!
  location: String
  login: String!
  ownedStars: Int
}

enum UserFetchingStatus {
  ACTIVE
  COMPLETED
}