type Contribution {
  linesAdded: Int
  linesRemoved: Int
  mergedPrsCount: Int
  prsCount: Int
  repoId: String
  repository: Repository
  year: Int!
}

type Country {
  """Alternative country spellings"""
  altSpellings: [String!]!

  """Area in square kilometers"""
  area: Float!
  code: String!
  flag: String!
  name: String!
  population: Int!
  states: [String!]!
  summary: CountrySummaryBasic

  """Top 5 biggest cities by population"""
  topCities: [String!]!
}

type CountryBasic {
  code: String!
  flag: String!
  name: String!
}

type CountrySummary {
  c: Float!
  country: String!
  countryData: CountryBasic!
  date: String!
  f: Float!
  s: Float!
  topUsers: CountryTopUsers
  usersCount: Int!
}

type CountrySummaryBasic {
  c: Int!
  country: String!
  date: String!
  f: Int!
  s: Int!
  topUsers: CountryTopUsers
  usersCount: Int!
}

enum CountrySummaryOrder {
  CONTRIBUTIONS
  FOLLOWERS
  STARS
  USERS
}

type CountryTopUsers {
  c: UserBasic
  f: UserBasic
  s: UserBasic
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LanguageEntity {
  id: String!
  size: Float!
}

type Organization {
  avatarUrl: String
  githubId: String!
  login: String!
  name: String
}

type ProfileForSitemap {
  avatarUrl: String
  login: String!
}

type Query {
  """List of countries"""
  country: [Country!]
  countryRankByLogin(login: String!): RankCountry
  countryRankings(country: String!, limit: Int! = 100, offset: Int! = 0, order: RankOrder! = STARS): [RankCountry!]!
  countrySummary(date: String, order: CountrySummaryOrder! = STARS): [CountrySummary!]!
  globalRankByLogin(login: String!): RankGlobal
  globalRankings(limit: Int! = 100, offset: Int! = 0, order: RankOrder! = STARS): [RankGlobal!]!
  profilesForSitemap: [ProfileForSitemap!]!
  rankTiersByName(name: String!): RankTier

  """List of rank tiers for a user"""
  rankTiersForLogin(login: String!): [RankTier!]
  user(login: String!): User
  users(logins: [String!]!): [User!]
}

type RankCountry {
  c: Int
  cD: Int
  cM: Int
  cProvisional: Int
  country: ID!
  f: Int
  fD: Int
  fM: Int
  fProvisional: Int
  githubId: ID!
  s: Int
  sD: Int
  sM: Int
  sProvisional: Int
  snapshots: JSON
  user: UserBasic
}

type RankCountryWithoutUser {
  c: Int
  cD: Int
  cM: Int
  cProvisional: Int
  country: ID!
  f: Int
  fD: Int
  fM: Int
  fProvisional: Int
  githubId: ID!
  s: Int
  sD: Int
  sM: Int
  sProvisional: Int
  snapshots: JSON
}

type RankGlobal {
  c: Int
  cD: Int
  cM: Int
  cProvisional: Int
  f: Int
  fD: Int
  fM: Int
  fProvisional: Int
  githubId: ID!
  s: Int
  sD: Int
  sM: Int
  sProvisional: Int
  snapshots: JSON
  user: UserBasic
}

type RankGlobalWithoutUser {
  c: Int
  cD: Int
  cM: Int
  cProvisional: Int
  f: Int
  fD: Int
  fM: Int
  fProvisional: Int
  githubId: ID!
  s: Int
  sD: Int
  sM: Int
  sProvisional: Int
  snapshots: JSON
}

enum RankOrder {
  CONTRIBUTIONS
  FOLLOWERS
  STARS
}

type RankTier {
  cTiers: [Tier!]!
  cUsers: Int!
  entityName: String!
  entityType: String!
  fTiers: [Tier!]!
  fUsers: Int!
  sTiers: [Tier!]!
  sUsers: Int!
}

type Repository {
  createdAt: DateTime
  forkCount: Int!
  githubId: String!
  isArchived: Boolean!
  languages: RepositoryLanguagesEntity
  name: String
  pushedAt: DateTime
  releasesCount: Int
  stargazerCount: Int!
  url: String!
}

type RepositoryLanguagesEntity {
  nodes: [LanguageEntity!]!
  totalCount: Int!
  totalSize: Float!
}

enum RepositorySortField {
  STARGAZERS
}

type SocialAccount {
  nodes: [SocialAccountNodeEntity!]
  totalCount: Int!
}

type SocialAccountNodeEntity {
  displayName: String
  provider: String!
  url: String!
}

enum SortDirection {
  ASC
  DESC
}

type Tier {
  level: Int!
  maxRank: Int!
  minRank: Int!
  minValue: Int!
  tier: Int!
}

type Timeline {
  changes: JSON!
  createdAt: DateTime!
}

type User {
  avatarUrl: String
  c: Int
  company: String
  contributedRepoCount: Int
  contributions: [Contribution!]
  country: String
  createdAt: DateTime!
  email: String
  f: Int
  fetchingStatus: UserFetchingStatus
  fetchingUpdatedAt: Float
  firstSeenAt: DateTime
  followersCount: Int
  followingCount: Int
  githubCreatedAt: DateTime
  githubFetchedAt: DateTime
  githubId: ID!
  githubServiceFetchedAt: DateTime
  githubUpdatedAt: DateTime
  isHireable: Boolean
  location: String
  login: String!
  name: String
  organizations: [Organization!]
  rankCountry: RankCountryWithoutUser
  rankGlobal: RankGlobalWithoutUser
  repositories(limit: Int! = 10, offset: Int! = 0, order: RankOrder! = STARS, sortBy: RepositorySortField! = STARGAZERS, sortDirection: SortDirection! = DESC): [Repository!]
  repositoriesCount: Int
  s: Int
  snapshots: JSON
  socialAccounts: SocialAccount
  timeline: [Timeline!]
  twitterUsername: String
  updatedAt: DateTime!
  websiteUrl: String
}

type UserBasic {
  avatarUrl: String
  c: Int
  country: String
  f: Int
  followersCount: Int
  githubId: ID!
  location: String
  login: String!
  s: Int
}

enum UserFetchingStatus {
  COMPLETED
  FETCHING
}